#!/usr/bin/env ruby

heading = "/** CODE GENERATED BY tools/#{File.basename(__FILE__)} */"

class Entry
attr_accessor :filename, :prefix, :names
    def initialize(filename, prefix)
        @filename = filename
        @prefix = prefix
        @names = nil
    end
end

entries = [
    Entry.new('gen/direction.h', 'DIRECTION'),
    Entry.new('gen/direction.h', 'CIRCULAR'),
    Entry.new('life/action_defs.h', 'ACTION_EFFECT'),
    Entry.new('life/being_defs.h', 'BEING_F'),
    Entry.new('life/being_defs.h', 'BEING_SPEED'),
    Entry.new('life/data_shp1.h', 'DATA_SHP1_AF'),
    Entry.new('life/data_shp1.h', 'DATA_SHP1_AS'),
    Entry.new('life/fsm.h', 'FSM_SIG'),
    Entry.new('life/gesture.h', 'GESTURE_ID'),
    Entry.new('life/gesture.h', 'GESTURE_F'),
    Entry.new('life/terr_defs.h', 'TERR_ID'),
    Entry.new('life/terr_defs.h', 'TERR_F'),
]

def print_usage(stream)
    stream.puts("usage: #{File.basename(__FILE__)} <out-basename>")
end

def usage_err(msg = nil, rc = 1)
    STDERR.puts("* error: #{msg}") if msg
    print_usage(STDERR)
    exit(rc)
end

out_basename = ARGV[0] || usage_err
while out_basename[0...2] == './'
    out_basename = out_basename[2..-1]
end

def read_names(filename, prefix)
    names = []
    File.readlines(filename).each do |line|
        if line =~ /^#define (#{prefix}\S+)\s+(.+?)\s*$/
            name = $1
            if !(name =~ /(_BASE|_MAX)$/)
                names << name
            end
        end
    end

    return names
end

def do_decl(stream, prefix, count)
    stream.puts "extern struct const_name_pair_t #{prefix.downcase}_names[#{count}];"
end

def do_impl(stream, filename, prefix, names)
    return if names.empty?

    stream.puts "/* #{filename}, #{prefix} */"
    stream.puts "struct const_name_pair_t " +
                "#{prefix.downcase}_names[#{names.size + 1}] = {" 
    names.each do |name|
        stream.puts "    { #{name}, \"#{name}\" },"
    end
    stream.puts "    { 0, NULL },"
    stream.puts "};"

    stream.puts
end

entries.each do |entry|
    entry.names = read_names(entry.filename, entry.prefix)
end

File.open("#{out_basename}.c", 'w') do |file|
    file.puts <<EOF
#{heading}

#include <stddef.h>
#include <stdio.h>
#include "gen/gen.h"
EOF

    entries.each do |entry|
        file.puts "#include \"#{entry.filename}\""
    end

    file.puts <<EOF
#include "#{out_basename}.h"

char *
const_names_get(struct const_name_pair_t *names, int id)
{
    while (names->name != NULL) {
        if (names->id == id) {
            return names->name;
        }
        ++names;
    }

    return "???";
}

char *
const_names_flags(struct const_name_pair_t *names, unsigned int flags)
{
    unsigned int cur;
    static char text[1024];
    int off;

    text[0] = '\\0';
    off = 0;
    cur = 1;

    while (flags != 0) {
        if (flags & cur) {
            if (off != 0) {
                off += sprintf(&text[off], " ");
            }
            off += sprintf(&text[off], "%s", const_names_get(names, cur));
            flags ^= cur;
        }

        cur <<= 1;
    }

    return text;
}

void
const_names_init(void)
{ }

EOF

    entries.each do |entry|
        do_impl(file, entry.filename, entry.prefix, entry.names)
    end
end

File.open("#{out_basename}.h", 'w') do |file|
    file.puts <<EOF
#{heading}

#ifndef H_#{File.basename(out_basename).upcase}_
#define H_#{File.basename(out_basename).upcase}_

#include "gen/gen.h"

char *const_names_get(struct const_name_pair_t *names, int id);
char *const_names_flags(struct const_name_pair_t *names, unsigned int flags);
void const_names_init(void);

EOF
    entries.each do |entry|
        do_decl(file, entry.prefix, entry.names.size + 1)
    end

    file.puts
    file.puts "#endif"
end

